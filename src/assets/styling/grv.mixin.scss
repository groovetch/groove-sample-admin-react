@mixin getGradient($from, $to, $deg: 0) {
  background: $from;
  background: -moz-linear-gradient(#{$deg}deg, #{$from} 0%, #{$to} 100%);
  background: -webkit-linear-gradient(#{$deg}deg, #{$from} 0%, #{$to} 100%);
  background: linear-gradient(#{$deg}deg, #{$from} 0%, #{$to} 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#{$from}",endColorstr="#{$to}",GradientType=1);
}

@mixin bg($color, $isImportant: false) {
  @if( $isImportant ) {
    background-color: $color !important;
  } @else {
    background-color: $color;
  }
}

@mixin runBackgroundType($type, $color) {
  .bg-#{$type} {
    @include bg($color, true);

    @at-root a#{&} {
      &:hover,
      &:focus {
        @include bg(lighten($color, 5%), true);
      }
    }

    @at-root button#{&} {
      &:hover,
      &:focus {
        @include bg(lighten($color, 5%), true);
      }
    }
  }
}

@mixin runAlertType($type, $color, $from, $to) {
  .alert-#{$type} {
    color: $color;
    background: $from linear-gradient(180deg, $from, $to) repeat-x;
    border-color: $from;

    hr {
      border-top-color: $from;
    }

    .alert-link {
      color: $color;
    }
  }
}

@mixin runListgroupItemType($type, $colorBG, $lightBG, $actionHoverBG, $colorText: null) {
  .list-group-item-#{$type} {
    color: $colorBG;
    background-color: $lightBG;

    &.list-group-item-action {
      &:hover,
      &:focus {
        color: $colorBG;
        background-color: $actionHoverBG;
      }

      &.active {
        color: #{$colorText or '#fff'};
        background-color: $colorBG;
        border-color: $colorBG;
      }
    }
  }
}

@mixin runBadgeType($type, $colorBG, $colorText) {
  .badge-#{$type} {
    color: $colorText;
    background-color: $colorBG;
  }

  a.badge-#{$type}:hover,
  a.badge-#{$type}:focus {
    color: $colorText;
    background-color: darken($colorBG, 10%);
  }
}

@mixin runButtonSolid($type, $colorBG, $colorText, $colorTextLight: null) {
  /* Button SOLID */
  .btn-#{$type} {
    color: #{$colorText};
    background: darken($colorBG, 5%) linear-gradient(180deg, $colorBG, darken($colorBG, 5%)) repeat-x;
    border-color: darken($colorBG, 10%);

    &:hover {
      color: #{$colorText};
      background: darken($colorBG, 5%) linear-gradient(180deg, $colorBG, darken($colorBG, 5%)) repeat-x;
      border-color: darken($colorBG, 10%);
    }

    &:focus,
    &.focus {
      box-shadow: 0 0 0 0 rgba($colorBG, 0.5);
    }

    &.disabled,
    &:disabled {
      color: #{$colorText};
      background-color: darken($colorBG, 10%);
      border-color: darken($colorBG, 10%);
      background-image: none;
    }
  }


  .btn-#{$type}:not(:disabled):not(.disabled):active,
  .btn-#{$type}:not(:disabled):not(.disabled).active,
  .show > .btn-#{$type}.dropdown-toggle {
    color: #{$colorText};
    background-color: darken($colorBG, 8%);
    background-image: none;
    border-color: darken($colorBG, 15%);
  }

  .btn-#{$type}:not(:disabled):not(.disabled):active:focus,
  .btn-#{$type}:not(:disabled):not(.disabled).active:focus,
  .show > .btn-success.dropdown-toggle:focus {
    box-shadow: 0 0 0 0 rgba($colorBG, 0.5);
  }

  /* button OUTLINE */
  .btn-outline-#{$type} {
    color: #{$colorTextLight or $colorBG};
    border-color: $colorBG;

    &:hover {
      color: $colorText;
      background-color: $colorBG;
      border-color: $colorBG;
    }

    &:focus,
    &.focus {
      box-shadow: 0 0 0 0 rgba($colorBG, 0.5);
    }

    &.disabled,
    &:disabled {
      color: $colorBG;
      background-color: transparent;
    }

    /* button OUTLINE WITH SHADOW */
    &.btn-shadow {
      box-shadow: 0 0.125rem 0.625rem rgba($colorBG, 0.4), 0 0.0625rem 0.125rem rgba($colorBG, 0.5);
    }

    &.btn-shadow.active:hover,
    &.btn-shadow.disabled:hover,
    &.btn-shadow:active:hover,
    &.btn-shadow:disabled:hover {
      box-shadow: 0 0.125rem 0.625rem rgba($colorBG, 0.5), 0 0.0625rem 0.125rem rgba($colorBG, 0.6);
    }

    &.btn-shadow:hover {
      box-shadow: 0px 5px 15px 2px rgba($colorBG, 0.19);
    }
  }

  .btn-outline-#{$type}:not(:disabled):not(.disabled):active,
  .btn-outline-#{$type}:not(:disabled):not(.disabled).active,
  .show > .btn-outline-#{$type}.dropdown-toggle {
    color: $colorText;
    background-color: $colorBG;
    border-color: $colorBG;
  }

  .btn-outline-#{$type}:not(:disabled):not(.disabled):active:focus,
  .btn-outline-#{$type}:not(:disabled):not(.disabled).active:focus,
  .show > .btn-outline-#{$type}.dropdown-toggle:focus {
    box-shadow: 0 0 0 0 rgba($colorBG, 0.5);
  }
}

@mixin runTableType($type, $colorBG, $colorBorder, $colorHover) {
  .table-#{$type} {
    background-color: $colorBG;

    & > th,
    & > td {
      background-color: $colorBG;
    }

    th,
    td,
    thead th,
    tbody + tbody  {
      border-color: $colorBorder;
    }

    &.table-hover {
      tbody tr:hover {
        background-color: $colorHover;
      }
    }

    @at-root .table-hover #{&} {
      &:hover {
        background-color: $colorHover;

        & > th,
        & > td {
          background-color: $colorHover;
        }
      }
    }
  }
}